[workspace]

members = [
	"dynatos",
	"dynatos-builder",
	"dynatos-builder-macros",
	"dynatos-context",
	"dynatos-html",
	"dynatos-html-macros",
	"dynatos-html-parser",
	"dynatos-loadable",
	"dynatos-macros",
	"dynatos-reactive",
	"dynatos-router",
	"dynatos-title",
	"dynatos-util",
]
resolver = "2"

[workspace.dependencies]

# Workspace members
dynatos                = { path = "dynatos" }
dynatos-builder        = { path = "dynatos-builder" }
dynatos-builder-macros = { path = "dynatos-builder-macros" }
dynatos-context        = { path = "dynatos-context" }
dynatos-html           = { path = "dynatos-html" }
dynatos-html-macros    = { path = "dynatos-html-macros" }
dynatos-html-parser    = { path = "dynatos-html-parser" }
dynatos-loadable       = { path = "dynatos-loadable" }
dynatos-macros         = { path = "dynatos-macros" }
dynatos-reactive       = { path = "dynatos-reactive" }
dynatos-router         = { path = "dynatos-router" }
dynatos-title          = { path = "dynatos-title" }
dynatos-util           = { path = "dynatos-util" }

# zutil
zutil-cloned = { git = "https://github.com/Zenithsiz/zutil", rev = "978fa5df733d59fc691812ce2fa6072bf901dc7f" }

anyhow               = "1.0.98"
convert_case         = "0.8.0"
derive_more          = "2.0.1"
derive_utils         = "0.15.0"
duplicate            = "2.0.0"
extend               = "1.2.0"
futures              = "0.3.31"
itertools            = "0.14.0"
js-sys               = "0.3.77"
parking_lot          = "0.12.3"
petgraph             = "0.8.2"
pin-project          = "1.1.10"
priority-queue       = "2.3.1"
proc-macro2          = "1.0.94"
quote                = "1.0.40"
scopeguard           = "1.2.0"
syn                  = "2.0.100"
thiserror            = "2.0.12"
tokio                = "1.44.2"
tracing              = "0.1.41"
tracing-subscriber   = "0.3.19"
tracing-web          = "0.1.3"
unicode-xid          = "0.2.6"
url                  = "2.5.4"
wasm-bindgen         = "0.2.100"
wasm-bindgen-futures = "0.4.50"
web-sys              = "0.3.77"

[workspace.lints]

clippy.nursery     = { level = "warn", priority = -1 }
clippy.pedantic    = { level = "warn", priority = -1 }
clippy.restriction = { level = "warn", priority = -1 }

# We enable restriction group and then allow any we don't care
clippy.blanket_clippy_restriction_lints = "allow"

# Styling
clippy.implicit_return    = "allow"
clippy.match_bool         = "allow"
clippy.option_if_let_else = "allow"
clippy.ref_patterns       = "allow"
clippy.single_match_else  = "allow"

# It's easier to define them before their first usage
# TODO: Can we instead get an error for when using items before their definition?
clippy.items_after_statements = "allow"

# We don't want to enforce `Send` futures
clippy.future_not_send = "allow"

# Most times, the panics are internal assertions that the user can't trigger
clippy.missing_panics_doc = "allow"
clippy.unwrap_in_result   = "allow"

# Shadowing is fine
# TODO: Turn off `unrelated` every once in a while?
clippy.shadow_reuse     = "allow"
clippy.shadow_same      = "allow"
clippy.shadow_unrelated = "allow"

# We want to use match ergonomics
clippy.pattern_type_mismatch = "allow"

# We sometimes need to explicitly panic
clippy.panic       = "allow"
clippy.unreachable = "allow"

# Misc.
clippy.arbitrary_source_item_ordering    = "allow"
clippy.arithmetic_side_effects           = "allow"
clippy.exhaustive_enums                  = "allow"
clippy.exhaustive_structs                = "allow"
clippy.expect_used                       = "allow"
clippy.field_scoped_visibility_modifiers = "allow"
clippy.impl_trait_in_params              = "allow"
clippy.indexing_slicing                  = "allow"
clippy.match_wild_err_arm                = "allow"
clippy.mem_forget                        = "allow"
clippy.min_ident_chars                   = "allow"
clippy.missing_docs_in_private_items     = "allow"
clippy.module_name_repetitions           = "allow"
clippy.pub_use                           = "allow"
clippy.pub_with_shorthand                = "allow"
clippy.question_mark_used                = "allow"
clippy.self_named_module_files           = "allow"
clippy.separated_literal_suffix          = "allow"
clippy.single_call_fn                    = "allow"
clippy.single_char_lifetime_names        = "allow"
clippy.string_slice                      = "allow"
clippy.unused_trait_names                = "allow"
clippy.wildcard_enum_match_arm           = "allow"

# False positives for tests in `tests/`.
clippy.tests_outside_test_module = "allow"

# TODO: Should we document all errors?
clippy.missing_errors_doc = "allow"

# TODO: Should we mark all of them as inline
clippy.missing_inline_in_public_items = "allow"

# TODO: Should we turn this off every once a while to check if we're missing any
#       default items we can implement better?
clippy.missing_trait_methods = "allow"

# TODO: Should we move to `alloc`?
clippy.std_instead_of_alloc = "allow"
